import numpy as np
import os 
import pandas as pd
import json
import re

def _get_lines(file_path, name):
    extraction = False
    lines = []
    dash_count = 0
    with open(file_path, "r") as file:
        
        for line in file:
            line = line.strip()
            if name in line:
                lines.append(line)
                extraction = True
                continue
            
            if extraction and line.startswith("----"):
                dash_count +=1
                if dash_count == 2:
                    break
                continue
            if extraction:
                lines.append(line)
    return lines

def _encoding_to_values(encoding_info):
    """Expects single line of the "Encoding Info" column from the snpe-dlc-info generated text file
    """
    encoding_columns = []
    encoding_values = []
    
    for pair in encoding_info.split(","):
        if "No encoding info for this tensor" not in pair:
            pair = pair.strip()
            key, value = pair.split(" ")
            encoding_columns.append(key)
            encoding_values.append(value)
    
    return encoding_columns, encoding_values

def _get_info_from_lines(lines):
    headers = [col.strip() for col in lines[0].split("|") if col.strip()]
    values = []
    encoding_columns = []
    for line in lines[1:]:
        value = [col.strip() for col in line.split("|") if col.strip()]
        encoding_columns, encoding_values = _encoding_to_values(value[-1])
        value = value[:-1] + encoding_values
        values.append(value)
    
    headers = headers[:-1] + encoding_columns
    
    return pd.DataFrame(values, columns=headers)
        
def _build_json_info(input_info, output_info):
    info = {}
    dimensions = input_info["Dimensions"].values[0]
    info["model_h"] = int(dimensions.split(",")[1].strip())
    info["model_w"] = int(dimensions.split(",")[2].strip())

    info["output_names"] = sorted(output_info["Output Name"].values)
    
    dequantize_info = {}
    for i, row in output_info.iterrows():
        output_name = row["Output Name"]
        
        dequantize_info[output_name] = {
            "shape": [int(dim.strip()) for dim in row["Dimensions"].split(",")],
            "type": row.get("Type", "uFxp_8"),
            "bit_width": int(row.get("bitwidth", 16)),
            "scale": float(row.get("scale", 1)),
            "min": float(row.get("min", 0)),
            "max": float(row.get("max", 0)),
            "offset": float(row.get("offset", 0)),
        }
    info["dequantize_info"] = dequantize_info
    
    return info
    
def _extract_info_from_snpe_dlc(file_path):
    
    input_lines = _get_lines(file_path, "Input Name")
    output_lines = _get_lines(file_path, "Output Name")
    
    input_info = _get_info_from_lines(input_lines)
    
    output_info = _get_info_from_lines(output_lines)
    
    info = _build_json_info(input_info, output_info)
    
    return info

def generate_dlc_info_json( model_name,
                            base_dir,
                            snpe_info_file_name,
                            text_file_path,
                            gt_labels_path,
                            raw_outputs_dir,
                            per_layer_analysis_name = "layer_stats.csv"):
    
    """Generate info.json file for a model trained with SNPE-DLC
    
    Parameters
    -----------
    model_name: str
        what you want the model name to be
    base_dir: str
        This is the dir in models_dlc where the model is stored
    snpe_info_file_name: str
        The name of the snpe-dlc-info.txt file generated by snpe-dlc-info command
    text_file_path: str
        Path to the inputs_raw.txt file that is generated by to_raw.py
    gt_labels_path: str
        Path to the labels.json file that is used to evaluate the model
    raw_outputs_dir: str
        Path to the correct file in raw_outputs where the model outputs are stored
    """
    
    info = _extract_info_from_snpe_dlc(os.path.join(base_dir, snpe_info_file_name)) 
    info["text_file_path"] = text_file_path
    info["raw_outputs_dir"] = raw_outputs_dir
    info["model_name"] = model_name
    info["gt_labels"] = gt_labels_path
    info["per_layer_analysis"] = f"{base_dir}/{per_layer_analysis_name}"
    
    throughput = -1
    if os.path.exists(os.path.join(base_dir, "throughput.txt")):
        with open(os.path.join(base_dir, "throughput.txt"), "r") as f:
            for line in f:
                if "Total throughput:" in line: 
                    match = re.search(r"Total throughput:\s*([\d\.]+)\s*infs/sec", line)
                    if match:
                        throughput = np.round(float(match.group(1)), 2)
                        break
    info["FPS"] = throughput
    
    
    with open(os.path.join(base_dir, "info.json"), "w") as f:
        json.dump(info, f)    

if __name__ == "__main__":
    generate_dlc_info_json(
                            model_name="yolov6n-per-channel-fused",
                            base_dir="models_dlc/yolov6n-per-channel-fused",
                            snpe_info_file_name="dlc-info-graph.txt",
                            text_file_path="data/test_raw_rgb/inputs_raw.txt",
                            gt_labels_path="data/test/labels.json",
                            raw_outputs_dir="raw_outputs/output-fused"
                            )
    generate_dlc_info_json(
                            model_name="yolov6n-per-channel-reordered",
                            base_dir="models_dlc/yolov6n-per-channel-reordered",
                            snpe_info_file_name="dlc-info-graph.txt",
                            text_file_path="data/test_raw/inputs_raw.txt",
                            gt_labels_path="data/test/labels.json",
                            raw_outputs_dir="raw_outputs/output-reordered"
                            )
    generate_dlc_info_json(
                            model_name="yolov6n-per-channel-conv-transpose",
                            base_dir="models_dlc/yolov6n-per-channel-conv-transpose",
                            snpe_info_file_name="dlc-info-graph.txt",
                            text_file_path="data/test_raw/inputs_raw.txt",
                            gt_labels_path="data/test/labels.json",
                            raw_outputs_dir="raw_outputs/output-conv-transpose"
                            )
    generate_dlc_info_json(
                            model_name="yolov6n-base-quant",
                            base_dir="models_dlc/yolov6n-base-quant",
                            snpe_info_file_name="snpe-dlc-info.txt",
                            text_file_path="data/test_raw/inputs_raw.txt",
                            gt_labels_path="data/test/labels.json",
                            raw_outputs_dir="raw_outputs/output-base-quant"
                            )
    
